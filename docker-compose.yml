version: '3.8'

services:
  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: appointment-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/appointment-realm
      - SPRING_MAIL_HOST=mailhog
      - SPRING_DATASOURCE_URL=jdbc:h2:file:/data/appointmentdb;DB_CLOSE_DELAY=-1
    volumes:
      - backend-logs:/app/logs
      - backend-data:/app/data
    networks:
      - appointment-network
    depends_on:
      - keycloak
      - mailhog
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Keycloak for OAuth2 Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.0
    container_name: appointment-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
    ports:
      - "9090:8080"
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json
    networks:
      - appointment-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/realms/appointment-realm"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog
    container_name: appointment-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - appointment-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8025/"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  appointment-network:
    driver: bridge
    name: appointment-network

# Volumes
volumes:
  backend-logs:
    driver: local
  backend-data:
    driver: local